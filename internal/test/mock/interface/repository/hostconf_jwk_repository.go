// Code generated by mockery v2.38.0. DO NOT EDIT.

package repository

import (
	jwk "github.com/lestrrat-go/jwx/v2/jwk"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	model "github.com/podengo-project/idmsvc-backend/internal/infrastructure/token/hostconf_jwk/model"
)

// HostconfJwkRepository is an autogenerated mock type for the HostconfJwkRepository type
type HostconfJwkRepository struct {
	mock.Mock
}

// CreateJWK provides a mock function with given fields: db
func (_m *HostconfJwkRepository) CreateJWK(db *gorm.DB) (*model.HostconfJwk, error) {
	ret := _m.Called(db)

	if len(ret) == 0 {
		panic("no return value specified for CreateJWK")
	}

	var r0 *model.HostconfJwk
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) (*model.HostconfJwk, error)); ok {
		return rf(db)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB) *model.HostconfJwk); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.HostconfJwk)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB) error); ok {
		r1 = rf(db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateSigningKeys provides a mock function with given fields: db
func (_m *HostconfJwkRepository) GetPrivateSigningKeys(db *gorm.DB) ([]jwk.Key, error) {
	ret := _m.Called(db)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateSigningKeys")
	}

	var r0 []jwk.Key
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) ([]jwk.Key, error)); ok {
		return rf(db)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB) []jwk.Key); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]jwk.Key)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB) error); ok {
		r1 = rf(db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicKeyArray provides a mock function with given fields: db
func (_m *HostconfJwkRepository) GetPublicKeyArray(db *gorm.DB) ([]string, error) {
	ret := _m.Called(db)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKeyArray")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) ([]string, error)); ok {
		return rf(db)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB) []string); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB) error); ok {
		r1 = rf(db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJWKs provides a mock function with given fields: db
func (_m *HostconfJwkRepository) ListJWKs(db *gorm.DB) ([]model.HostconfJwk, error) {
	ret := _m.Called(db)

	if len(ret) == 0 {
		panic("no return value specified for ListJWKs")
	}

	var r0 []model.HostconfJwk
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) ([]model.HostconfJwk, error)); ok {
		return rf(db)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB) []model.HostconfJwk); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HostconfJwk)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB) error); ok {
		r1 = rf(db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeJWK provides a mock function with given fields: db, kid
func (_m *HostconfJwkRepository) RevokeJWK(db *gorm.DB, kid string) (*model.HostconfJwk, error) {
	ret := _m.Called(db, kid)

	if len(ret) == 0 {
		panic("no return value specified for RevokeJWK")
	}

	var r0 *model.HostconfJwk
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (*model.HostconfJwk, error)); ok {
		return rf(db, kid)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) *model.HostconfJwk); ok {
		r0 = rf(db, kid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.HostconfJwk)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(db, kid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHostconfJwkRepository creates a new instance of HostconfJwkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHostconfJwkRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *HostconfJwkRepository {
	mock := &HostconfJwkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
