// Code generated by mockery v2.46.0. DO NOT EDIT.

package presenter

import (
	model "github.com/podengo-project/idmsvc-backend/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	public "github.com/podengo-project/idmsvc-backend/internal/api/public"
)

// HostPresenter is an autogenerated mock type for the HostPresenter type
type HostPresenter struct {
	mock.Mock
}

// HostConf provides a mock function with given fields: domain, token
func (_m *HostPresenter) HostConf(domain *model.Domain, token string) (*public.HostConfResponseSchema, error) {
	ret := _m.Called(domain, token)

	if len(ret) == 0 {
		panic("no return value specified for HostConf")
	}

	var r0 *public.HostConfResponseSchema
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Domain, string) (*public.HostConfResponseSchema, error)); ok {
		return rf(domain, token)
	}
	if rf, ok := ret.Get(0).(func(*model.Domain, string) *public.HostConfResponseSchema); ok {
		r0 = rf(domain, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*public.HostConfResponseSchema)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Domain, string) error); ok {
		r1 = rf(domain, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHostPresenter creates a new instance of HostPresenter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHostPresenter(t interface {
	mock.TestingT
	Cleanup(func())
}) *HostPresenter {
	mock := &HostPresenter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
