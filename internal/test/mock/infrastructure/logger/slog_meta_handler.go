// Code generated by mockery v2.40.3. DO NOT EDIT.

package logger

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// SlogMetaHandler is an autogenerated mock type for the SlogMetaHandler type
type SlogMetaHandler struct {
	mock.Mock
}

// Add provides a mock function with given fields: handler
func (_m *SlogMetaHandler) Add(handler slog.Handler) {
	_m.Called(handler)
}

// Enabled provides a mock function with given fields: _a0, _a1
func (_m *SlogMetaHandler) Enabled(_a0 context.Context, _a1 slog.Level) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, slog.Level) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Handle provides a mock function with given fields: _a0, _a1
func (_m *SlogMetaHandler) Handle(_a0 context.Context, _a1 slog.Record) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slog.Record) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithAttrs provides a mock function with given fields: attrs
func (_m *SlogMetaHandler) WithAttrs(attrs []slog.Attr) slog.Handler {
	ret := _m.Called(attrs)

	if len(ret) == 0 {
		panic("no return value specified for WithAttrs")
	}

	var r0 slog.Handler
	if rf, ok := ret.Get(0).(func([]slog.Attr) slog.Handler); ok {
		r0 = rf(attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(slog.Handler)
		}
	}

	return r0
}

// WithGroup provides a mock function with given fields: name
func (_m *SlogMetaHandler) WithGroup(name string) slog.Handler {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for WithGroup")
	}

	var r0 slog.Handler
	if rf, ok := ret.Get(0).(func(string) slog.Handler); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(slog.Handler)
		}
	}

	return r0
}

// NewSlogMetaHandler creates a new instance of SlogMetaHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSlogMetaHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *SlogMetaHandler {
	mock := &SlogMetaHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
