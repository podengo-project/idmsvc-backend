// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUS2/jNhD+K8S0hxYWLOVx0i1AkyZA0Rhxewp8YKiRxJoaskPSrTfQf1+Q8iNx9oVg",
	"D3ujKM73Gg6fQdnBWUIKHupnYPTOksf8cYvShH57I7WJjGlHWQpIIS2lc0YrGbSl8h9vKe151eMg0+pn",
	"xhZq+Kk8wpfTX19eM1uGcRwLaNAr1i6BQA0PO3LRWhaR+oleOLZPCGOx17OMSqH3303PDm8x0XxF1omo",
	"sdiRZDmTsySmaXSqlmbB1iEHnRJtpfF4ir7M5SJY0WCrCUXoUWACEvtmQAHuBUyy3eR24P9ycAahvqwu",
	"C2gtDzJADZrCxTkUELYOp0/skFOCA3ovu9e18KcN4sZGao4lPrCmLttj/Ddqxgbqx4n3iLIaC3gVXv18",
	"Yu4v21ix60IBSHFIMPdrWL2lGgvQ1Nq3INeTUmFbcbW4Ew163ZFoNfsgpHNspeqFpEZEr6kTnTWSOuGD",
	"VGvxy0Y75Bmq3s46y8NMWWpNRAozZVCSZNXrgCpExl+Tf+TB37dL5I1WSV4fgvN1WSpL3hqcMza9DHNl",
	"h1I6Xepm8BtVbs5SrQ45z+UkN3u/WtxBARtkP3mp5tX8LHXCOiTpNNRwMa/mF6nFMvS5u6XRG/yQVh2G",
	"t3HkqPMt0dSy9IFjli+0P9zOlAZjiEzivKrEfz2SkMYIybg/A1kD54G5a6CG3zH8kYmL16/AeVV9boIO",
	"58qT0cwz1MpowjeX7l+ZPFJxGCRvoYakiNB7sY5PyIQB/TR6AqlxVlNIwcvOp3s1OVM9qjWsEk7JKJvt",
	"+6LMpV8MMp/4VIwPE+uPlGOSpN8bZEJCTpcY6sfTDP/ePYy/4QaNdQNmpMgGaijT08MkDYyrA/opwO2R",
	"TByi9FAAySFP4Asx42r8GAAA//+gDCaMsgYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
