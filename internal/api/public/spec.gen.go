// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
