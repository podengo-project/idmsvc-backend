// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VZjlOks+4KM2TGV/ebv83wAAAP//4t4qTgRzAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
