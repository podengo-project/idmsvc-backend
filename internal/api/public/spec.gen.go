// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9a3PbOJJ/BcWbqji7oqyXbVlVqS3HdmJNHMdjOzNzG/lcEAFKGJMgQ4J2FK/++xUe",
	"JEGQlCjFmctM3X7Yyoh4dDca/Ub7yXICPwwopiy2Rk9WCCPoY4Yj8V8ngQ8JHaNL/iv/AeHYiUjISECt",
	"kXUzxyBJCAJsDhkgCFNG3AVgcwyQmNm2Whb+Av3Qw2I9CCJIUeDLWTNMcQQZRmC6AC/4Ty+AE/g+pIgP",
	"foBegq2RNbF6eOjgPbhvT/sHHbvbxcg+7Pc79mDYg7g/3O+jfmdiWctlyyIcrhCyudWyKPT5fL6w1bIi",
	"/DkhEUbWiEUJblmxM8c+5Bv9FGHXGln/tZuTYld+jXdTCojFf7+aj5F/hWckZhHkRLgJ7jE9wxDhqEye",
	"DxTbjPgYhDCOH4MIARYAmLA5p5MDWUolEGkrgkfC5oCE0J47TkoOTkeB2VxuleH2u301t8fIt3WgbAHV",
	"SpTZIuTTYxYROtNw+xVHMQlqMUrBgjNMGXiQg9fC9ms2blOAaExmcxZf4c8JjtkY1cGlBgCCgBtEAHFS",
	"kGnCWYtF0CF0toaCaiNbLWSPOcfUQ7fkqMRhQGOs3ZMrPBOUv1Kf+BcnoAxTJpg/DD1+7CSgu3/EHO6n",
	"jZgwXV7ubxJAbim5p4qtmJzask6jKIieHUSxalwFmvgCUnKJ84kDH4MgxBK0NofqLIjZcUDdZwfMXPha",
	"zlpFQw4il2HpVACdDM5zEjN5HPGzg1qxdj20YwYiHEY45jeRQ1ugMAQeiRkIXMULMfic4GghULjCEKUc",
	"9Z0YVS1bAfbNnMSrAY9D7BCXOJkKUSC/w4vnJ/k1mVFCZ4W117HGDDNwjxdxzsFcf8WLmGEfBBFIYhwp",
	"qPn9w9F3JrbcpDH4uXZWAgJHxl38GCLIsFz+iEv67wS63GcbwBMxs3gABd1UwuNjjKP/A3bfBAHFN8tU",
	"8QjNcgyPccReJxR5uKz3joBUSfyiOwHlNgXlBlULXJ6+tzF1AoQR+L291zkEDo4Yv1eQ4dhqWYwwvqJ1",
	"BKZicb7E8VFpVEHxtawvdjS3FaU1xYiwGwvIj/PpgrQIEQ4q9C4jjisjXF+60Itxywq1n54sEseJVO3K",
	"YOQG1KuTD++Pxhft09+P3l+en7bA8cUrbQtwlLB5EBG2sFqWG0Q+ZNbI4ijYarkcz7H4AXCtD3au3hyD",
	"wV53oMj3soTpsmVR4txLG0EHqQgQOD7St6AMRxR6gE+VOxEKzk+OLsHO1ckFcGj1RgG7gy4zke91Bn27",
	"07d73ZvO3qg/HHUO/9npjDodHVfORcLG1MC4CBh4gB5BQKwK+OeYQT8EOx9vjmtBmGI3iLAJQ+9bYZDL",
	"NgEixH5xd5v/7/Xp2/EFOD69uhm/GR8f3ZyKXycT+n48brfbkwkVP5xenFQNKvEF3yQH8/L0Pai9JVUw",
	"xjgi0LujiT81z6trtbjjwVnAGln/86lrH95+6tiHt//4SdvxWiwA5AJgZwpjDLqdSnrEyfQP7LBnuxLp",
	"ehow8pfGl2KpW/CfrOyOZVdFZ+YCV8nTNemX43ib7RWkQK4UNepzhKiduokZEMuWssfXSiBTmGZqMQ6S",
	"yMG58ypWSlhwh2kUeJ6PKbvDFE693JUprvV+AeAjFnauWlT7zn0R+esdQZxzIOzuYYhtOBxOpXsLe860",
	"4N7mU5Tf4i+UfZSCmA1QhIrm2LMJ4lTP/skVH7zj3BBbo0+3/Dih56dLji+PUraSR/UgwgCfniz3M+JY",
	"yZ+67dLey5Yxplcx5pbzT1Ho19LUVHSn4gOQvp345zyIGXjwuT8d2PkSStGSWNFdP0OLn1TO1dMg8DAU",
	"PlFhM3Pvs8SHnCkgEhtrHwGcBokR7sjFovjJ1tequOQaHzQNRBic0GTahboXBQ5pMvGGj1wWOagBlCHk",
	"k5SYKUWN+M+ABYqSU7yGgnKZdcJIp0kR0dtc4L3m4pb/KMME8mZKiaNZO1uLIB2GTAqNUZXdpvYWkamc",
	"QQ8Oevhwvzu0Uccd2oOpO7SnLkY26g37XXe/7+x3D3UKqdCWD7+cYzpjc2vU329ZPqH6f6bI61tuatfl",
	"57qZTP0g/hELcpMQpt6oVSUI/CCh7M4LpCkel6l2rlzabDDIBosNjhIWvLkuEPTThOMAE49NrFurZRGG",
	"fbGyRqNuxbVUP8Aoggv+37nULB8l1+H7g9yplQY9h9PzBGunrrgzF+zmFozsFiDU8RLErXg+WMpP4MC2",
	"gQgF4In/HwCTTNdNrBGYWO//27BKx5dH4PhoYrXS8VJTy9F19kLrwytzIW0Fpai/aQld98uFutrn3FqQ",
	"36Tt2bX73Ztuf9Trj/r7/zaGC0Nj1eh0cIh9OWytSXm63qZUQCwntMBRq8Si7hZVcFcDnj+5uM65vcgZ",
	"TxNL8cLEmgYxCwSE+jri02vxCSDIIHAwFZRbNsbgXO1dBb40ItKrXYuCGAZgHAcOEVF/FgiO59xaIf25",
	"NBJT7FxoNAK1qPJ8QsdyVrcO8iZ69IqPTNfMTKNVEko3SpRdoy53bBop7c1QG4fwWixUPgxDKWZiS+cx",
	"88AKZMiR09TmVRAwcJOqzTSmMQ7hh8yjWKM5lYV5NcfeGPknqWlWq2YUfpspGzkJSGLJaCIFmLJoAQhN",
	"mS1TQsIOaBdtfAfexWpnadUro5aEUP7erjC7546j27DFBfhHGewxPqTnYY0snHDMuE68J5SYK8TJNEPy",
	"zocUznAk/YZO/3B/D/Yce4p6A5UW2x+iot9Qsrk1HJ+a2MaSBKv58g0fs6wlRaN9KijVaF5OyGYSLL3E",
	"BrEb7VV7FmuizNq093KWyigal1UBo4heR88qWpn41N7e4whnQdH8ojW+wePLI3NKrTnsKq7QBHKF+SSC",
	"D1xmpvdyh9tNXvCII9uBMX7ZBjd54FSMdiAFAfUWYMrtJQZQIoKgHH8CvWLeC1IEaMD4UD9AxCUy3Syp",
	"F7cnRQ+xdLlzdYSozX1OJSU1k7u31y/a3Dnp3ySetwCfE+jJjTUktjbCszTg1tENjTpp7qUoBvXgxP6w",
	"C6cuOrC7Qwfbe91p34aHjmN3O6g/3HeGyOnvaQ6XhMx607//9csvl4N4HLedP6bszH77evhzEn91P0e/",
	"UJqg8+D8689n/a/3j3t/0Ll/M3t3eXf2cVUQA38JSaRuenf/sDvoHHQOOiXx9i0ONUvp2oR0YjDIDq/O",
	"s9/c19YRLcVBsm8iogrSkColX/IQqxa5I5ThGTcUqr1l4QsWkC/CXQCmVqTUU0djr4bypSaTns2P8mRL",
	"qzRY5O6f6V7ItaquhcmadSy46clXH5EZwmhO+hSDLSlvTE/XK9C9mHnkhPe8D64IGa7H2lrelrLDH04+",
	"WHWcqhMhTauxFYTYSKnVoLSa754N76rQs06Eujhpq4Y8BR4xoF1PhbeYNSLAjWJw4wz5vlnhAdhxkijC",
	"lHkLqbLTa8OFFKaJz9HLrtKtros12Z8iJvcVqG2tP42s83dh2rrzasLC0jLZgnkNxKpPTlTjjKkbbJie",
	"dQJUcdaQAi17bmelG1jU/Ig5VZoRM0i8Sj0rvmAE8JfQgzSLpHHPTazZArg9a4uiLjyFzn0xSHalbo8w",
	"+NwgoUjnHblrBTykIkILQULJ5wSnVY0ER7nXHsKIESfxYAQCR/K3g1M4wyiYetgvQtY7cLqHB4OB3Tt0",
	"e/agBzv2cH//0B66sLPXcYeui1wNVlkzlW9dmR5kkCVxdVHm2c3NJZADxClk5QeCiEXQBp2BbufOGQtt",
	"tXYxsmwaucVk555Mdor/0xOeJihVqNQlCuYYzBMfUjtLvuirMfyFrULsImDgjcEE5vz1OU5RCJiSQy5z",
	"WzooKsnXTOmYYkmVzm1mtrwVtbOeumlZCVWEWRJR6eJwshDkxw8OOLocF00ZrPb89JTdRus1RKnVMAI5",
	"KOpSxiPgBxGu+GDJG2T99PS7fXVmjy+ux2/Pbq7tq9NfPp5e39jjk2VOQ85vHWt5WzKacEaFqvJBlaPh",
	"l+uBoAIUGvFFPo6lNzAWqf2EMhxhBB7nxMMgxBEfzb1F7kPmZU/1sXaCZOh4BXp6kFugKWcMOh3ti2AZ",
	"+YFTWhlY2gBJTjliA/LLKPdyQm+FL9sojphrATNCym/aB+ot0ujTyvCiOrNay6NYatr4ZhQU1hsVfjJV",
	"BffFX8RAeti/ZB62shAuREWDGUgonDJfoP3c/v4vJxdbGCZpoemGMuDKKKOUNdAhXHgBRJlk3OVY2E5A",
	"3d0RoQ+YsiBa3BG0O3I/IwowRWFAKDMioSrwyed2y1Sqj0k6fegMpoddu3fgOPag13Ns2Bv2ucqDyMUH",
	"/Q50rWd12v+0LPiyjs2z42tss+VFySu8rHTQc2ZdC7HuqaoqtGQG02pQDnLnEe5hP19JyPpEcMXlL+V/",
	"ZVhQoWs7HsGU2dlSxQifTAdbrXUp4Jw+a3J7eoXmkjs1Rrz2efNExcQfp7DUGHUHMbGWLVAxslc1snE6",
	"UOPNulRUyyIhvJNncUdozKDn3cFotoocuXKD0SzhJInNU1UrmVl+25a0sxGNbRXcNVL+a5P8W2UDS0F8",
	"xTWVjFDY41kTbHUqZdtc2tFKzlzNmE35slQFskmqabu0j3FaYsPb7alrPNPYjMQ35tsHrq3lUxPAAm7K",
	"RwQ/yOqotNpNN3Yf55gCwgCJwRRzi1YeF0ZtIF5ZqKVIDBi8xxS4UeDri7Uro5tK+H9TceGa2t20dHdF",
	"lQU1lVGxqqSkj7QMrQH5j1x1+Peq/dPtFS5d02TKujnpo7bNQ56tFVV/rUJUcbXhdrVxmqJ+ZsF54cOq",
	"6//4F/s1jDEC49QoB+MTmQgVrkmBh9zOYH/Y6XTtg/1+zx6gvmtDF/Xsg4OOc9gf9vagiB9tVxgomHqr",
	"ssD8+Kqepoh6L/IVI/Dzb9cqLRFE4OffbkoPYSXOlTmYth6+4YPS162bAqs9rzuBbBtpLWqnuMTByHjQ",
	"E7c3Kxb/86q/N5F+2xRG25WF0SoWqkLaogan/Rcuf64JUEoCuBHBFHkLIEaZL73qcG8u7goF5E2FXylS",
	"WZR85l0wBV/1S9etzJw8SgFBCGdEPFDjhk/iseq3qoZdIu7qpx/qTt22LI/Qe2m0koibINYuDMkuQf7u",
	"Q3dXIfIvj/iEvep2Jkmn09sPXDfG7BXf2YObzenySRR/2XxSGOEHEojI6wYQLluWj6WMFCFUa9Qt21FI",
	"SdGyoFSvK/WMyQw3rnI0mbOqYjal/qp1LiW3kYCei+EaUs2mveejS3l5eV8kBGrFJves8o5pTswmV+rs",
	"9ByM0fvUG8t8odIJFcV3+d1fAxG60oEyHdl0MIiwE0ToGd5UpI8pCmBUWBtZKEhL2O3kwV9ZQA2n2HtZ",
	"MKygF85h0VLa75uxIT3TBe2vt/z/OvbhZGIXH/edV8EwvsyBa4GjExAThl9uYb+Y7PwtwWIKH8hMwioY",
	"Odda3MTJxLQZFP6bijojCiGxLPcYcbFM9KpSYjFOSLbU3NEs1swSD7NTs/klKzDTzmSyO5k8/vPl02A5",
	"mfxrR8L0HwHoy1c7nf+IR6STCfrHy8lEgr1qzE9VFpYk/1pk+LAfHhfJFWtx4cN+eFxyZl2LTzr0B8ep",
	"Nj9iCq4KRWjo3M1EG58i5FYqxApmpuzSYxb6K6OG63Gf8H91WpZE1xqVi0rVcPOkWMBEuTFXdTEgVGzu",
	"BJ6HnXJWuVvILlImEi5mmWYGj7nVhXwwHrhAmFAgxFFmVJUXSTExVxlnFdIc5KxipWYdM7StcikSwmyT",
	"2/XHLs604tTzMHqFQn+HoymOgli9G5Jv1JM4gZ63EE/rkjBMlbtWV63KxeWk71coXopHZkcrdl6bMdZN",
	"iiP738KaaHOD4p+6QVFBgy0MB7MPTV4m+/xVi6tLENNsZ/M6zBX50arePRs/GMojVO9i2Twrwg+ZGVeo",
	"6ymKhHu8qHoNSoHwUfjV0uNf1x8uwG94CjiwYOfn396pwvH4ZfMMFSebE/i+aFsjqg5H4BozMMkqOEag",
	"O7FU148pdO4xRWAOY0A40/J5GInORTLZ9RDcY3R3T9AaPNRIPlMzbBUa9wStRmHF+ztDvgjINGmizldC",
	"3DgyW8UV1cHZ6lc5FZLoCiNwBhm4TqZZgEtNyEK2wiUrx23x/t4Q9/HU7g6Gjj3Yh/v2dDCEdufw0D3c",
	"O+x3D7tw67itjgBQVRjbxXErOj59Yy19JhAqCz1+7M4FjTsLNMkxmKJv26reFYKw3Ofq+xze/3fr+O4d",
	"LZrwkOgQhp0kImwhIrLydCQjCfnMFmUYX4san6wnmNBI6Wggm2Km1ZXC7ulfO9DD4OhyDGaQ4Ue4aE8o",
	"t6zETMm+Is4nuguKIvada9EDrwU4E75sgSCa3RHUEpYVJmyOZW88+eAv0rsggOOL9oReO0GI49GE2uAF",
	"x33E13khKMDnAeg4OI7zz3K7FyPZU1L235NjwA5nOKXQr86u3wP/5vxapJxemvNH8lBelFdpAWHqypfq",
	"qt5QDp6sa3qqTiHXeCF5hxdZgIsg39aNT7vm5VnWQVaVNepdXmUe7M9uKWvgI1vuytcEghlEv6pSG7zX",
	"yhjh3CQYmkTYESlP6Wmm+F3j6IE4hf50soLZVuaM1bLSrrMjq9vutEX8JggxhSGxRla/3Wn3pOM7F7di",
	"t7YtwZiBmInWZCJkwA8cipfiZjlx/mB8Dhl4JJ4HPMyUwuWzubU/q3K33ih/VD2B4RcCUvJVhQJF1iPt",
	"EZK26eR7TCiMsKrpkLsgWbzhBDQOPNxGgfC/0uplbrVYxUiz3sb5kwlWHiYAyocrdmk+kSVyIPciVTC2",
	"Iz11DHriFLnfGHPzp9sBmQGohnY7WTdm0Xk0569sy1J7Xc3xbOr+GpB398zvGkR7y1aGmvqtAbipt7sC",
	"2lujG3Cv06mzNrJxVc1eOSsPmswt1lWLWYONZ2laRPCIoT8+WZkItm45inHi+zBapOV6KcOqqIfO2vz2",
	"wlksXnYpWyK2RKlnkSurwM2H7K5oAM3hCYPqwKZqaZrd2jQsU3EH26VbVHSVrW1Arm8Qztm60QLFLtyS",
	"vwQBXgdo8WzdS6vDAhVNTE/0Pllc4Uxx1jpW5giKfb2XpfvQXc+dNc1yf8ArIc0GztBPq7X5J+PelHiz",
	"XXtT8kknhlG+bGU6bbfGaki7ocMVjcD/pMvYBJDiDdT7U+h97J+b+6ufO9dzf83z8Gfg/Jon738RZXDS",
	"5AV6Ux6v6lefcftTkhC0lFzmYVbhh52I30XXny8kZtx+UoyX1b42UwNyoUwJGGc6qOJ09e5OFOWqruby",
	"LeojjIEEGLX/MocqCblOShnR1PT1b0bLGIi4euk0RHUzRK2sDXakKASIiJ9VGtOpMBHPGjUjvbJrPLcU",
	"gyRaq+3TTvjWNiZcRSP9v8j5csgbaKHnUxHrLZ/in5oROgUyZ17mAxntkndMRd9yUy9ji/Jhm1Gy76RX",
	"6oJxVX/CweRiqvXCA3GgivvlJUG5DDM63a9XQg0YsrZX/jdwdP+HvweKl8rsk/fjr70bCfs+vCni71t6",
	"Hn+O41CbLfgL8Xjx71r8bZi8ENLciNtLBE/ZXj4jMk22D0Udb+pfYbjlD4+f9IfHy90n9zOiy6q8gXyL",
	"zK+eCEKnaQPBOcXUQdt6Zv20wQuN9BFVFkMt/sExHdmt//CYejpSEQu7mWPgJp5X3VeuAXyqueB2cMn3",
	"d/U+39GKB2ym2aa/bDOesJVEpPbIejOZpscHEfaDzC/Jo3/f+7l7/jddmr6hqv5bMvK8CmRkgXjdp70d",
	"fCZhWXrh9BwS6C1mVU8Z14ubo4QFkjey+XnjAi5rYpn2v6suy9BLCUQ6StQ0lIo8BFOK9bnUEjUhdd4I",
	"xyRutmqJld9iplUpbO16FP9o1Q8bJ2vVm19mhcf3DxrX7L0WIwm49hcxitxwGQUocdRhJ5GnVSDHD87u",
	"Q7dCw7yWRXFq9BQzuHbKZYQfCH7MZ4XyB3PibUZLc4Xjq48n2l+dCihA2CVUVkoqomd6Iv+pDEqqqmNA",
	"A4BEOs9bgAh7woxThVRqOpgmDPgBwp4SUSoxy2WW7EykNkzv/vJ2+b8BAAD//y6tY9GYdAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
